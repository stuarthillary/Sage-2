/* This source code licensed under the GNU Affero General Public License */

namespace Highpoint.Sage.Utility
{

    /// <summary>
    /// An object of this class tracks the values that a double takes on, recording its initial,
    /// minimum, maximum, and final values. It relies on the user of the object to implement a
    /// watcher on the double of interest, that registers a new double value with this object
    /// whenever the double changes.
    /// </summary>
    public class DoubleTracker : IDoubleTracker
    {
        private double _min;
        private double _max;
        private double _initial;
        private double _final;
        /// <summary>
        /// Creates a DoubleTracker.
        /// </summary>
        public DoubleTracker()
        {
            Reset();
        }
        /// <summary>
        /// Resets a DoubleTracker so that the initial and final values are double.NaN, the maximum
        /// value is double.MinValue, and the minimum value is double.MaxValue.
        /// </summary>
        public void Reset()
        {
            _min = double.MaxValue;
            _max = double.MinValue;
            _initial = double.NaN;
            _final = double.NaN;
        }

        /// <summary>
        /// Resets a DoubleTracker so that the initial and final values are double.NaN, the maximum
        /// value is double.MinValue, and the minimum value is double.MaxValue.
        /// </summary>
        public void Set(double initial, double minimum, double maximum, double final)
        {
            _min = minimum;
            _max = maximum;
            _initial = initial;
            _final = final;
        }
        /// <summary>
        /// Presents a candidate double to this tracker for consideration. Initial, min, max and final
        /// value records are updated if appropriate, based on existing values, and this value.
        /// </summary>
        /// <param name="candidate">The new double value of the underlying field or data.</param>
        public void Register(double candidate)
        {
            if (double.IsNaN(_initial))
                _initial = candidate;
            if (candidate < _min)
                _min = candidate;
            if (candidate > _max)
                _max = candidate;
            _final = candidate;
        }

        /// <summary>
        /// The first recorded value of the double.
        /// </summary>
        public double InitialValue => _initial;

        /// <summary>
        /// The last recorded value of the double.
        /// </summary>
        public double FinalValue => _final;

        /// <summary>
        /// The minimum recorded value of the double.
        /// </summary>
        public double MinValue => _min;

        /// <summary>
        /// The maximum recorded value of the double.
        /// </summary>
        public double MaxValue => _max;

        /// <summary>
        /// Provides a string representation of this DoubleTracker, of the form [initial/minimum/maximum/final]
        /// </summary>
        /// <returns>A string representation of this DoubleTracker, of the form [initial/minimum/maximum/final]</returns>
        public override string ToString()
        {
            return string.Format("[{0}/{1}/{2}/{3}]", _initial.ToString("r"), _min.ToString("r"), _max.ToString("r"), _final.ToString("r"));
        }

        /// <summary>
        /// Initializes this double tracker from a string similar to the one generated by ToString().
        /// </summary>
        /// <param name="s">The string.</param>
        public void FromString(string s)
        {
            Reset();
            string[] vals = s.Substring(1, s.Length - 2).Split('/');
            double.TryParse(vals[0], out _initial);
            double.TryParse(vals[1], out _min);
            double.TryParse(vals[2], out _max);
            double.TryParse(vals[3], out _final);
        }

        //private static void testMe() {
        //    DoubleTracker dt = new DoubleTracker();
        //    string s = dt.ToString();
        //    DoubleTracker dt2 = new DoubleTracker();
        //    dt2.FromString(s);
        //}


        //private static void testMe2() {
        //    double d = double.MinValue;

        //    Console.WriteLine("d = {0}", d);
        //    Console.WriteLine("d.ToString(   ) = {0}", d.ToString());
        //    Console.WriteLine("d.ToString(\"r\") = {0}", d.ToString("r"));
        //    Console.WriteLine("d.Equals(double.Parse(d.ToString(\"r\"))) is {0}.", d.Equals(double.Parse(d.ToString("r"))));
        //    try {
        //        Console.WriteLine("d.Equals(double.Parse(d.ToString(   ))) is {0}.", d.Equals(double.Parse(d.ToString())));
        //    } catch (System.OverflowException oe) {
        //        Console.WriteLine("d.Equals(double.Parse(d.ToString(   ))) blows up with {0}, {1}.", oe.GetType().Name, oe.Message);
        //    }
        //    Console.WriteLine(d.Equals(double.Parse(d.ToString("r"))));

        //}
    }
}
